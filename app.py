import streamlit as st
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta

# ============================================================================
# –ú–ù–û–ì–û–Ø–ó–´–ß–ù–´–ï –ü–ï–†–ï–í–û–î–´
# ============================================================================

TRANSLATIONS = {
    "kz": {
        "title": "üí∞ “ö–∞—Ä–∂—ã –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã",
        "subtitle": "“ö–∞—Ä–∂—ã–ª—ã“õ –µ—Å–µ–ø—Ç–µ—É–ª–µ—Ä–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω –∫”ô—Å—ñ–±–∏ “õ“±—Ä–∞–ª",
        "author": "üë®‚Äçüíª ”ò–∑—ñ—Ä–ª–µ—É—à—ñ",
        "author_name": "**–°”ô–∫–µ–Ω –¢–æ–π–±–µ–∫–æ–≤**",
        "courses": "üìö [–ú–µ–Ω—ñ“£ –∫—É—Ä—Å—Ç–∞—Ä—ã–º](https://coursesapp-e9669.web.app)",
        "bot": "ü§ñ [–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç](https://t.me/saken_assistant_bot)",
        "contacts": "üìû +7(701)7319631",
        # –í–∫–ª–∞–¥–∫–∏
        "loans": "üßÆ –ù–µ—Å–∏–µ–ª–µ—Ä",
        "investment": "üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–ª—ã“õ —Ç–∞–ª–¥–∞—É",
        "eps": "üè¶ –¢–ñ–ú –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã",
        "deposits": "üí≥ –î–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä",
        # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫—Ä–µ–¥–∏—Ç–æ–≤
        "calculate_schedule": "–ù–µ—Å–∏–µ–Ω—ñ ”©—Ç–µ—É –∫–µ—Å—Ç–µ—Å—ñ–Ω –µ—Å–µ–ø—Ç–µ—É",
        "loan_amount": "–ù–µ—Å–∏–µ —Å–æ–º–∞—Å—ã (‚Ç∏)",
        "interest_rate": "–ü–∞–π—ã–∑–¥—ã“õ –º”©–ª—à–µ—Ä–ª–µ–º–µ (% –∂—ã–ª–¥—ã“õ)",
        "loan_term": "–ù–µ—Å–∏–µ –º–µ—Ä–∑—ñ–º—ñ (–∂—ã–ª)",
        "payment_type": "–¢”©–ª–µ–º —Ç“Ø—Ä—ñ",
        "annuity": "–ê–Ω–Ω—É–∏—Ç–µ—Ç—Ç—ñ–∫",
        "differentiated": "–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª–¥—ã“õ",
        "calculate_loan": "–ù–µ—Å–∏–µ–Ω—ñ –µ—Å–µ–ø—Ç–µ—É",
        "total_payment": "–ñ–∞–ª–ø—ã —Ç”©–ª–µ–º —Å–æ–º–∞—Å—ã",
        "total_interest": "–ñ–∞–ª–ø—ã –ø–∞–π—ã–∑–¥–∞—Ä",
        "payment_schedule": "“ö–∞—Ä—ã–∑–¥—ã “õ–∞–π—Ç–∞—Ä—É –∫–µ—Å—Ç–µ—Å—ñ",
        "payment_structure": "–¢”©–ª–µ–º “õ“±—Ä—ã–ª—ã–º—ã",
        "payment_dynamics": "–ö–µ–∑–µ“£–¥–µ—Ä –±–æ–π—ã–Ω—à–∞ —Ç”©–ª–µ–º –¥–∏–Ω–∞–º–∏–∫–∞—Å—ã",
        "period": "–ö–µ–∑–µ“£",
        "payment": "–¢”©–ª–µ–º",
        "principal": "–ù–µ–≥—ñ–∑–≥—ñ “õ–∞—Ä—ã–∑",
        "interest": "–ü–∞–π—ã–∑–¥–∞—Ä",
        "balance": "“ö–∞–ª–¥—ã“õ",
        # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        "discount_rate": "–î–∏—Å–∫–æ–Ω—Ç—Ç–∞—É –º”©–ª—à–µ—Ä–ª–µ–º–µ—Å—ñ (% –∂—ã–ª–¥—ã“õ)",
        "initial_investment": "–ë–∞—Å—Ç–∞–ø“õ—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è (‚Ç∏)",
        "cash_flows": "–ê“õ—à–∞ –∞“ì—ã–Ω–¥–∞—Ä—ã",
        "investment_caption": "–ë–∞—Å—Ç–∞–ø“õ—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–Ω—ã (—Ç–µ—Ä—ñ—Å –±–µ–ª–≥—ñ—Å—ñ–º–µ–Ω) –∂”ô–Ω–µ –∫–µ–ª–µ—Å—ñ –∞“õ—à–∞ –∞“ì—ã–Ω–¥–∞—Ä—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.",
        "analysis_periods": "–¢–∞–ª–¥–∞—É –∫–µ–∑–µ“£–¥–µ—Ä—ñ–Ω—ñ“£ —Å–∞–Ω—ã (–∂—ã–ª)",
        "cash_flow_year": "–ñ—ã–ª–¥–∞“ì—ã –∞“õ—à–∞ –∞“ì—ã–Ω—ã",
        "analyze_project": "–ñ–æ–±–∞–Ω—ã —Ç–∞–ª–¥–∞—É",
        "npv": "NPV (–¢–∞–∑–∞ –∫–µ–ª—Ç—ñ—Ä—ñ–ª–≥–µ–Ω “õ“±–Ω)",
        "irr": "IRR (–Ü—à–∫—ñ —Ç–∞–±—ã—Å—Ç—ã–ª—ã“õ –Ω–æ—Ä–º–∞—Å—ã)",
        "payback_period": "”®—Ç–µ–ª—É –º–µ—Ä–∑—ñ–º—ñ (PP)",
        "discounted_payback": "–î–∏—Å–∫–æ–Ω—Ç—Ç–∞–ª“ì–∞–Ω ”©—Ç–µ–ª—É –º–µ—Ä–∑—ñ–º—ñ (DPP)",
        "cash_flow_diagram": "–ê“õ—à–∞ –∞“ì—ã–Ω–¥–∞—Ä—ã–Ω—ã“£ –¥–∏–∞–≥—Ä–∞–º–º–∞—Å—ã",
        "efficiency_conclusion": "–¢–∏—ñ–º–¥—ñ–ª—ñ–∫ —Ç—É—Ä–∞–ª—ã “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã",
        "project_efficient": "–ñ–æ–±–∞ —Ç–∏—ñ–º–¥—ñ. NPV > 0, –±“±–ª “õ–æ—Å—ã–º—à–∞ “õ“±–Ω–Ω—ã“£ –ø–∞–π–¥–∞ –±–æ–ª“ì–∞–Ω—ã–Ω –±—ñ–ª–¥—ñ—Ä–µ–¥—ñ.",
        "project_inefficient": "–ë–µ—Ä—ñ–ª–≥–µ–Ω –¥–∏—Å–∫–æ–Ω—Ç—Ç–∞—É –º”©–ª—à–µ—Ä–ª–µ–º–µ—Å—ñ –±–æ–π—ã–Ω—à–∞ –∂–æ–±–∞ —Ç–∏—ñ–º–¥—ñ –µ–º–µ—Å. NPV <= 0.",
        "irr_higher": "–ñ–æ–±–∞–Ω—ã“£ IRR ({:.2f}%) –¥–∏—Å–∫–æ–Ω—Ç—Ç–∞—É –º”©–ª—à–µ—Ä–ª–µ–º–µ—Å—ñ–Ω–µ–Ω ({:.2f}%) –∂–æ“ì–∞—Ä—ã, –±“±–ª —Ç–∏—ñ–º–¥—ñ–ª—ñ–∫—Ç—ñ —Ä–∞—Å—Ç–∞–π–¥—ã.",
        "irr_lower": "–ñ–æ–±–∞–Ω—ã“£ IRR ({:.2f}%) –¥–∏—Å–∫–æ–Ω—Ç—Ç–∞—É –º”©–ª—à–µ—Ä–ª–µ–º–µ—Å—ñ–Ω–µ–Ω ({:.2f}%) —Ç”©–º–µ–Ω.",
        # –≠–ü–° –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        "eps_title": "–¢–∏—ñ–º–¥—ñ –∂—ã–ª–¥—ã“õ –º”©–ª—à–µ—Ä–ª–µ–º–µ (–¢–ñ–ú)",
        "eps_info": "–¢–ñ–ú –Ω–µ—Å–∏–µ–Ω—ñ“£, –±–∞—Ä–ª—ã“õ –∫–æ–º–∏—Å—Å–∏—è–ª–∞—Ä–¥—ã –µ—Å–∫–µ—Ä–µ –æ—Ç—ã—Ä—ã–ø –∞–Ω—ã“õ—Ç–∞–ª“ì–∞–Ω, –Ω–∞“õ—Ç—ã “õ“±–Ω—ã–Ω –∫”©—Ä—Å–µ—Ç–µ–¥—ñ",
        "eps_details": "üìä –¢–ñ–ú –µ—Å–µ–ø—Ç–µ—É–≥–µ –Ω–µ –∫—ñ—Ä–µ–¥—ñ",
        "eps_include": """
        **–ï—Å–µ–ø–∫–µ –∞–ª—ã–Ω–∞—Ç—ã–Ω —Ç”©–ª–µ–º–¥–µ—Ä:**
        - –ù–µ–≥—ñ–∑–≥—ñ “õ–∞—Ä—ã–∑ –∂”ô–Ω–µ –ø–∞–π—ã–∑–¥–∞—Ä
        - –ë—ñ—Ä–∂–æ–ª“ì—ã –∫–æ–º–∏—Å—Å–∏—è–ª–∞—Ä (“õ–∞—Ä–∞—Å—Ç—ã—Ä—É, –±–µ—Ä—É “Ø—à—ñ–Ω)
        - –ê–π–ª—ã“õ/–∂—ã–ª–¥—ã“õ –∫–æ–º–∏—Å—Å–∏—è–ª–∞—Ä
        - –°–∞“õ—Ç–∞–Ω–¥—ã—Ä—É
        - –ë–∞—Å“õ–∞ –º—ñ–Ω–¥–µ—Ç—Ç—ñ —Ç”©–ª–µ–º–¥–µ—Ä
        """,
        "loan_parameters": "–ù–µ—Å–∏–µ–Ω—ñ“£ –Ω–µ–≥—ñ–∑–≥—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ",
        "nominal_rate": "–ù–æ–º–∏–Ω–∞–ª–¥—ã –º”©–ª—à–µ—Ä–ª–µ–º–µ (% –∂—ã–ª–¥—ã“õ)",
        "nominal_rate1": "–ù–æ–º–∏–Ω–∞–ª–¥—ã –º”©–ª—à–µ—Ä–ª–µ–º–µ",
        "loan_term_months": "–ù–µ—Å–∏–µ –º–µ—Ä–∑—ñ–º—ñ (–∞–π)",
        "additional_fees": "“ö–æ—Å—ã–º—à–∞ –∫–æ–º–∏—Å—Å–∏—è–ª–∞—Ä –º–µ–Ω —Ç”©–ª–µ–º–¥–µ—Ä",
        "one_time_fees": "**–ë—ñ—Ä–∂–æ–ª“ì—ã –∫–æ–º–∏—Å—Å–∏—è–ª–∞—Ä:**",
        "issue_fee": "–ë–µ—Ä—É –∫–æ–º–∏—Å—Å–∏—è—Å—ã (%)",
        "fixed_fee": "–ë–µ–∫—ñ—Ç—ñ–ª–≥–µ–Ω –∫–æ–º–∏—Å—Å–∏—è (‚Ç∏)",
        "recurring_fees": "**–¢“±—Ä–∞“õ—Ç—ã –∫–æ–º–∏—Å—Å–∏—è–ª–∞—Ä:**",
        "monthly_fee": "–ê–π–ª—ã“õ “õ—ã–∑–º–µ—Ç –∫”©—Ä—Å–µ—Ç—É (‚Ç∏)",
        "annual_fee": "–ñ—ã–ª–¥—ã“õ “õ—ã–∑–º–µ—Ç –∫”©—Ä—Å–µ—Ç—É (‚Ç∏)",
        "insurance_section": "**–°–∞“õ—Ç–∞–Ω–¥—ã—Ä—É:**",
        "insurance": "–°–∞“õ—Ç–∞–Ω–¥—ã—Ä—É (% —Å–æ–º–∞–¥–∞–Ω)",
        "calculate_eps": "üìà –¢–ñ–ú –µ—Å–µ–ø—Ç–µ—É",
        "nominal_rate_label": "–ù–æ–º–∏–Ω–∞–ª–¥—ã –º”©–ª—à–µ—Ä–ª–µ–º–µ",
        "effective_rate": "–¢–∏—ñ–º–¥—ñ –º”©–ª—à–µ—Ä–ª–µ–º–µ (–¢–ñ–ú)",
        "difference": "–ê–π—ã—Ä–º–∞—à—ã–ª—ã“õ",
        "from_nominal": "–Ω–æ–º–∏–Ω–∞–ª–¥—ã –º”©–ª—à–µ—Ä–ª–µ–º–µ–¥–µ–Ω",
        "payment_details": "üìã –¢”©–ª–µ–º –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ",
        "month": "–ê–π",
        "fees": "–ö–æ–º–∏—Å—Å–∏—è–ª–∞—Ä",
        "total_payment_single": "–ñ–∞–ª–ø—ã —Ç”©–ª–µ–º",
        "overpayment_structure": "üìä –ù–µ—Å–∏–µ –±–æ–π—ã–Ω—à–∞ “Ø—Å—Ç–µ–º–µ —Ç”©–ª–µ–º–Ω—ñ“£ “õ“±—Ä—ã–ª—ã–º—ã",
        "fees_insurance": "–ö–æ–º–∏—Å—Å–∏—è–ª–∞—Ä –∂”ô–Ω–µ —Å–∞“õ—Ç–∞–Ω–¥—ã—Ä—É",
        "monthly_fees": "–ê–π–ª—ã“õ –∫–æ–º–∏—Å—Å–∏—è–ª–∞—Ä",
        "annual_fees": "–ñ—ã–ª–¥—ã“õ –∫–æ–º–∏—Å—Å–∏—è–ª–∞—Ä",
        "issue_fee_full": "–ë–µ—Ä—É –∫–æ–º–∏—Å—Å–∏—è—Å—ã",
        "issue_fee_fixed": "–¢“±—Ä–∞“õ—Ç—ã –∫–æ–º–∏—Å—Å–∏—è",
        "total_overpayment": "**–ù–µ—Å–∏–µ –±–æ–π—ã–Ω—à–∞ –∂–∞–ª–ø—ã “Ø—Å—Ç–µ–º–µ —Ç”©–ª–µ–º:** {:,.0f} ‚Ç∏ (–Ω–µ—Å–∏–µ —Å–æ–º–∞—Å—ã–Ω–∞–Ω {:.1f}%)",
        "of_loan_amount": "–Ω–µ—Å–∏–µ —Å–æ–º–∞—Å—ã–Ω–∞–Ω",
        "overpayment_distribution": "–ù–µ—Å–∏–µ –±–æ–π—ã–Ω—à–∞ “Ø—Å—Ç–µ–º–µ —Ç”©–ª–µ–º–Ω—ñ“£ “Ø–ª–µ—Å—Ç—ñ—Ä—ñ–ª—É—ñ",
        "no_additional_fees": "“ö–æ—Å—ã–º—à–∞ —Ç”©–ª–µ–º–¥–µ—Ä –∂–æ“õ",
        "eps_conclusions": "üí° “ö–æ—Ä—ã—Ç—ã–Ω–¥—ã–ª–∞—Ä",
        "eps_warning": "**–ù–∞–∑–∞—Ä –∞—É–¥–∞—Ä—ã“£—ã–∑!** –¢–ñ–ú –Ω–æ–º–∏–Ω–∞–ª–¥—ã –º”©–ª—à–µ—Ä–ª–µ–º–µ–¥–µ–Ω –∞–π—Ç–∞—Ä–ª—ã“õ—Ç–∞–π –∂–æ“ì–∞—Ä—ã. –ù–µ—Å–∏–µ–Ω—ñ“£ –Ω–∞“õ—Ç—ã “õ“±–Ω—ã –∂–∞—Ä–∏—è–ª–∞–Ω“ì–∞–Ω–Ω–∞–Ω {:.2f}% –∂–æ“ì–∞—Ä—ã.",
        "eps_recommendation": "**“∞—Å—ã–Ω—ã—Å—Ç–∞—Ä:** –ë–∞—Å“õ–∞ “±—Å—ã–Ω—ã—Å—Ç–∞—Ä–¥—ã “õ–∞—Ä–∞—Å—Ç—ã—Ä—ã“£—ã–∑ –Ω–µ–º–µ—Å–µ —à–∞—Ä—Ç—Ç–∞—Ä–¥—ã —Ç–∞–ª“õ—ã–ª–∞—É“ì–∞ —Ç—ã—Ä—ã—Å—ã“£—ã–∑.",
        "eps_info_moderate": "–¢–ñ–ú –Ω–æ–º–∏–Ω–∞–ª–¥—ã –º”©–ª—à–µ—Ä–ª–µ–º–µ–¥–µ–Ω –æ—Ä—Ç–∞—à–∞ –¥–µ“£–≥–µ–π–¥–µ –∂–æ“ì–∞—Ä—ã. –ê–π—ã—Ä–º–∞—à—ã–ª—ã“ì—ã ({:.2f}%) “õ“±—Ä–∞–π–¥—ã.",
        "eps_success": "–¢–∞–º–∞—à–∞ —à–∞—Ä—Ç—Ç–∞—Ä! –¢–ñ–ú –Ω–æ–º–∏–Ω–∞–ª–¥—ã –º”©–ª—à–µ—Ä–ª–µ–º–µ–≥–µ —ñ—Å –∂“Ø–∑—ñ–Ω–¥–µ —Å”ô–π–∫–µ—Å –∫–µ–ª–µ–¥—ñ.",
        # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–∫–ª–∞–¥–æ–≤
        "deposit_title": "–î–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä –º–µ–Ω —Å–∞–ª—ã–º–¥–∞—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã",
        "deposit_success": "–ü–∞–π—ã–∑–¥–∞—Ä–¥—ã –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É–º–µ–Ω —Å–∞–ª—ã–º–Ω—ã“£ —Ç–∞–±—ã—Å—Ç—ã–ª—ã“ì—ã–Ω –µ—Å–µ–ø—Ç–µ“£—ñ–∑",
        "deposit_parameters": "–°–∞–ª—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ",
        "deposit_amount": "–°–∞–ª—ã–º —Å–æ–º–∞—Å—ã (‚Ç∏)",
        "deposit_rate": "–ü–∞–π—ã–∑–¥—ã“õ –º”©–ª—à–µ—Ä–ª–µ–º–µ (% –∂—ã–ª–¥—ã“õ)",
        "deposit_term": "–°–∞–ª—ã–º –º–µ—Ä–∑—ñ–º—ñ (–∞–π)",
        "capitalization_type": "–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ç“Ø—Ä—ñ",
        "capitalization_frequency": "–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∂–∏—ñ–ª—ñ–≥—ñ",
        "monthly_cap": "–ê–π–ª—ã“õ",
        "quarterly_cap": "–®–∏—Ä–µ–∫ –∂—ã–ª–¥—ã“õ",
        "yearly_cap": "–ñ—ã–ª–¥—ã“õ",
        "end_term": "–ú–µ—Ä–∑—ñ–º —Å–æ“£—ã–Ω–¥–∞",
        "additional_conditions": "“ö–æ—Å—ã–º—à–∞ —à–∞—Ä—Ç—Ç–∞—Ä",
        "deposit_topup": "**–°–∞–ª—ã–º–¥—ã —Ç–æ–ª—ã“õ—Ç—ã—Ä—É:**",
        "monthly_topup": "–ê–π–ª—ã“õ —Ç–æ–ª—ã“õ—Ç—ã—Ä—É (‚Ç∏)",
        "taxation": "**–°–∞–ª—ã“õ —Å–∞–ª—É:**",
        "tax_free": "–°–∞–ª—ã“õ —Å–∞–ª—ã–Ω–±–∞–π–¥—ã",
        "tax_rate": "–°–∞–ª—ã“õ –º”©–ª—à–µ—Ä–ª–µ–º–µ—Å—ñ (%)",
        "inflation": "**–ò–Ω—Ñ–ª—è—Ü–∏—è–Ω—ã –µ—Å–µ–ø–∫–µ –∞–ª—É:**",
        "include_inflation": "–ò–Ω—Ñ–ª—è—Ü–∏—è–Ω—ã –µ—Å–µ–ø–∫–µ –∞–ª—É",
        "inflation_rate": "–ò–Ω—Ñ–ª—è—Ü–∏—è –±–æ–ª–∂–∞–º—ã (% –∂—ã–ª–¥—ã“õ)",
        "calculate_deposit": "üí∏ –¢–∞–±—ã—Å—Ç—ã–ª—ã“õ—Ç—ã –µ—Å–µ–ø—Ç–µ—É",
        "deposit_results": "üìä **–°–∞–ª—ã–º–¥—ã –µ—Å–µ–ø—Ç–µ—É –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ**",
        "initial_amount": "–ë–∞—Å—Ç–∞–ø“õ—ã —Å–æ–º–∞",
        "total_topup": "–¢–æ–ª—ã“õ—Ç—ã—Ä—É–ª–∞—Ä —Å–æ–º–∞—Å—ã",
        "final_amount": "–ñ–∏–Ω–∞“õ—Ç–∞–ª“ì–∞–Ω —Å–æ–º–∞",
        "accrued_interest": "–ï—Å–µ–ø—Ç–µ–ª–≥–µ–Ω –ø–∞–π—ã–∑–¥–∞—Ä",
        "net_income": "–¢–∞–∑–∞ —Ç–∞–±—ã—Å",
        "tax_payment": "–¢”©–ª–µ–Ω–µ—Ç—ñ–Ω —Å–∞–ª—ã“õ",
        "inflation_analysis": "üìä –ò–Ω—Ñ–ª—è—Ü–∏—è–Ω—ã –µ—Å–µ–ø–∫–µ –∞–ª—É",
        "real_final_amount": "–ù–∞“õ—Ç—ã “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã —Å–æ–º–∞",
        "real_income": "–ù–∞“õ—Ç—ã —Ç–∞–±—ã—Å",
        "real_annual_yield": "–ù–∞“õ—Ç—ã –∂—ã–ª–¥—ã“õ —Ç–∞–±—ã—Å—Ç—ã–ª—ã“õ",
        "nominal_yield": "–ù–æ–º–∏–Ω–∞–ª–¥—ã —Ç–∞–±—ã—Å—Ç—ã–ª—ã“õ",
        "positive_real_yield": "üí∞ **–û“£ –Ω–∞“õ—Ç—ã —Ç–∞–±—ã—Å—Ç—ã–ª—ã“õ!** –°–∞–ª—ã–º–¥–∞—Ä —Å–∞—Ç—ã–ø –∞–ª—É “õ–∞–±—ñ–ª–µ—Ç—ñ–Ω —Å–∞“õ—Ç–∞–π–¥—ã.",
        "low_real_yield": "‚ö†Ô∏è **–¢”©–º–µ–Ω –Ω–∞“õ—Ç—ã —Ç–∞–±—ã—Å—Ç—ã–ª—ã“õ.** –°–∞–ª—ã–º –∏–Ω—Ñ–ª—è—Ü–∏—è–¥–∞–Ω —ñ—à—ñ–Ω–∞—Ä–∞ “õ–æ—Ä“ì–∞–π–¥—ã.",
        "negative_real_yield": "üìâ **–¢–µ—Ä—ñ—Å –Ω–∞“õ—Ç—ã —Ç–∞–±—ã—Å—Ç—ã–ª—ã“õ.** –°–∞–ª—ã–º–Ω—ã“£ —Å–∞—Ç—ã–ø –∞–ª—É “õ–∞–±—ñ–ª–µ—Ç—ñ —Ç”©–º–µ–Ω–¥–µ–π–¥—ñ.",
        "with_inflation": "–∏–Ω—Ñ–ª—è—Ü–∏—è–Ω—ã –µ—Å–∫–µ—Ä–µ –æ—Ç—ã—Ä—ã–ø",
        "without_inflation": "–∏–Ω—Ñ–ª—è—Ü–∏—è–Ω—ã –µ—Å–µ–ø–∫–µ –∞–ª–º–∞–π",
        "annual_yield": "üí´ –¢–∏—ñ–º–¥—ñ –∂—ã–ª–¥—ã“õ —Ç–∞–±—ã—Å—Ç—ã–ª—ã“õ",
        "deposit_growth": "üìà –°–∞–ª—ã–º–Ω—ã“£ ”©—Å—É –¥–∏–Ω–∞–º–∏–∫–∞—Å—ã",
        "deposit_growth_month": "–°–∞–ª—ã–º–Ω—ã“£ –∞–π–ª–∞—Ä –±–æ–π—ã–Ω—à–∞ ”©—Å—É—ñ",
        "month_label": "–ê–π",
        "amount_label": "–°–æ–º–∞, ‚Ç∏",
        "capitalization_comparison": "üîç –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ç“Ø—Ä–ª–µ—Ä—ñ–Ω —Å–∞–ª—ã—Å—Ç—ã—Ä—É",
        "income": "–¢–∞–±—ã—Å",
        "deposit_recommendations": "üí° “∞—Å—ã–Ω—ã—Å—Ç–∞—Ä",
        "best_income_message": "**–ï“£ –∂–æ“ì–∞—Ä—ã —Ç–∞–±—ã—Å—Ç—ã** **{}** –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è “õ–∞–º—Ç–∞–º–∞—Å—ã–∑ –µ—Ç–µ–¥—ñ: **{:.0f} ‚Ç∏**",
        "topup_benefit": "**–°–∞–ª—ã–º–¥—ã —Ç–æ–ª—ã“õ—Ç—ã—Ä—É** –∫“Ø—Ä–¥–µ–ª—ñ –ø–∞–π—ã–∑–¥–∞—Ä–¥—ã“£ –∞—Ä“õ–∞—Å—ã–Ω–¥–∞ –∂–∏–Ω–∞“õ—Ç–∞–ª“ì–∞–Ω —Å–æ–º–∞–Ω—ã –∞–π—Ç–∞—Ä–ª—ã“õ—Ç–∞–π –∞—Ä—Ç—Ç—ã—Ä–∞–¥—ã.",
        # –û–±—â–∏–µ
        "not_calculated": "–ï—Å–µ–ø—Ç–µ—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å",
        "not_paid_off": "”®—Ç–µ–ª–º–µ–¥—ñ",
        "years": "–∂—ã–ª",
        "footer": "“ö–æ–ª–¥–∞–Ω–±–∞ Streamlit Cloud-—Ç–∞ –æ—Ä–Ω–∞–ª–∞—Å—Ç—ã—Ä—ã–ª“ì–∞–Ω ‚Ä¢ –ù“±—Å“õ–∞ 2.0",
    },
    "ru": {
        "title": "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
        "subtitle": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤",
        "author": "üë®‚Äçüíª –û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ",
        "author_name": "**–°–∞–∫–µ–Ω –¢–æ–π–±–µ–∫–æ–≤**",
        "courses": "üìö [–ú–æ–∏ –∫—É—Ä—Å—ã](https://coursesapp-e9669.web.app)",
        "bot": "ü§ñ [–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç](https://t.me/saken_assistant_bot)",
        "contacts": "üìû +7(701)7319631",
        # –í–∫–ª–∞–¥–∫–∏
        "loans": "üßÆ –ö—Ä–µ–¥–∏—Ç—ã",
        "investment": "üìà –ò–Ω–≤–µ—Å—Ç-–∞–Ω–∞–ª–∏–∑",
        "eps": "üè¶ –≠–ü–° –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
        "deposits": "üí≥ –í–∫–ª–∞–¥—ã –∏ –¥–µ–ø–æ–∑–∏—Ç—ã",
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã –∫–∞–∑–∞—Ö—Å–∫–∏–º, –Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        "calculate_schedule": "–†–∞—Å—á–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞",
        "loan_amount": "–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ (‚Ç∏)",
        "interest_rate": "–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (% –≥–æ–¥–æ–≤—ã—Ö)",
        "loan_term": "–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–ª–µ—Ç)",
        "payment_type": "–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞",
        "annuity": "–ê–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π",
        "differentiated": "–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
        "calculate_loan": "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫—Ä–µ–¥–∏—Ç",
        "total_payment": "–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç",
        "total_interest": "–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤",
        "payment_schedule": "–ì—Ä–∞—Ñ–∏–∫ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞",
        "payment_structure": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π",
        "payment_dynamics": "–î–∏–Ω–∞–º–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º",
        "period": "–ü–µ—Ä–∏–æ–¥",
        "payment": "–ü–ª–∞—Ç–µ–∂",
        "principal": "–û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥",
        "interest": "–ü—Ä–æ—Ü–µ–Ω—Ç—ã",
        "balance": "–û—Å—Ç–∞—Ç–æ–∫",
        # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        "discount_rate": "–°—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (% –≥–æ–¥–æ–≤—ã—Ö)",
        "initial_investment": "–ù–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (‚Ç∏)",
        "cash_flows": "–î–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏",
        "investment_caption": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (—Å–æ –∑–Ω–∞–∫–æ–º '-') –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏.",
        "analysis_periods": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ (–ª–µ—Ç)",
        "cash_flow_year": "–î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ –∑–∞ –≥–æ–¥",
        "analyze_project": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
        "npv": "NPV (–ß–∏—Å—Ç–∞—è –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)",
        "irr": "IRR (–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –Ω–æ—Ä–º–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏)",
        "payback_period": "–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ (PP)",
        "discounted_payback": "–î–∏—Å–∫. —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ (DPP)",
        "cash_flow_diagram": "–î–∏–∞–≥—Ä–∞–º–º–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤",
        "efficiency_conclusion": "–í—ã–≤–æ–¥ –æ–± —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "project_efficient": "–ü—Ä–æ–µ–∫—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω. NPV > 0, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏.",
        "project_inefficient": "–ü—Ä–æ–µ–∫—Ç –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–µ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. NPV <= 0.",
        "irr_higher": "IRR –ø—Ä–æ–µ–∫—Ç–∞ ({:.2f}%) –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—Ç–∞–≤–∫—É –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ({:.2f}%), —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.",
        "irr_lower": "IRR –ø—Ä–æ–µ–∫—Ç–∞ ({:.2f}%) –Ω–∏–∂–µ —Å—Ç–∞–≤–∫–∏ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ({:.2f}%).",
        # –≠–ü–° –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        "eps_title": "–†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏ (–≠–ü–°)",
        "eps_info": "–≠–ü–° –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∫–æ–º–∏—Å—Å–∏–π –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π",
        "eps_details": "üìä –ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ä–∞—Å—á–µ—Ç –≠–ü–°",
        "eps_include": """
        **–£—á–∏—Ç—ã–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç–µ–∂–∏:**
        - –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        - –ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ (–∑–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –≤—ã–¥–∞—á—É)
        - –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ/–µ–∂–µ–≥–æ–¥–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏
        - –°—Ç—Ä–∞—Ö–æ–≤–∫–∏
        - –ü—Ä–æ—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        """,
        "loan_parameters": "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–µ–¥–∏—Ç–∞",
        "nominal_rate": "–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (% –≥–æ–¥–æ–≤—ã—Ö)",
        "nominal_rate1": "–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞",
        "loan_term_months": "–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–º–µ—Å—è—Ü–µ–≤)",
        "additional_fees": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –∏ –ø–ª–∞—Ç–µ–∂–∏",
        "one_time_fees": "**–ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏:**",
        "issue_fee": "–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–¥–∞—á—É (%)",
        "fixed_fee": "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è (‚Ç∏)",
        "recurring_fees": "**–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏:**",
        "monthly_fee": "–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ (‚Ç∏)",
        "annual_fee": "–ï–∂–µ–≥–æ–¥–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ (‚Ç∏)",
        "insurance_section": "**–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ:**",
        "insurance": "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ (% –æ—Ç —Å—É–º–º—ã)",
        "calculate_eps": "üìà –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≠–ü–°",
        "nominal_rate_label": "–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞",
        "effective_rate": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (–≠–ü–°)",
        "difference": "–†–∞–∑–Ω–∏—Ü–∞",
        "from_nominal": "–æ—Ç –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π",
        "payment_details": "üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π",
        "month": "–ú–µ—Å—è—Ü",
        "fees": "–ö–æ–º–∏—Å—Å–∏–∏",
        "total_payment_single": "–í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂",
        "overpayment_structure": "üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã –ø–æ –∫—Ä–µ–¥–∏—Ç—É",
        "fees_insurance": "–ö–æ–º–∏—Å—Å–∏–∏ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏",
        "monthly_fees": "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏",
        "annual_fees": "–ï–∂–µ–≥–æ–¥–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏",
        "issue_fee_full": "–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–¥–∞—á—É",
        "issue_fee_fixed": "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è",
        "total_overpayment": "–û–±—â–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞",
        "of_loan_amount": "–æ—Ç —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞",
        "overpayment_distribution": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã –ø–æ –∫—Ä–µ–¥–∏—Ç—É",
        "no_additional_fees": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ—Ç",
        "total_overpayment": "**–û–±—â–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É:** {:,.0f} ‚Ç∏ ({:.1f}% –æ—Ç —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞)",
        "eps_conclusions": "üí° –í—ã–≤–æ–¥—ã",
        "eps_warning": "**–í–Ω–∏–º–∞–Ω–∏–µ!** –≠–ü–° –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏. –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–∞ –Ω–∞ {:.2f}% –≤—ã—à–µ –∑–∞—è–≤–ª–µ–Ω–Ω–æ–π.",
        "eps_recommendation": "**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —É—Å–ª–æ–≤–∏—è.",
        "eps_info_moderate": "–≠–ü–° —É–º–µ—Ä–µ–Ω–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –Ω–æ–º–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É. –†–∞–∑–Ω–∏—Ü–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {:.2f}%.",
        "eps_success": "–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è! –≠–ü–° –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–µ.",
        # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–∫–ª–∞–¥–æ–≤
        "deposit_title": "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–∫–ª–∞–¥–æ–≤ –∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤",
        "deposit_success": "–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤–∫–ª–∞–¥–∞ —Å —É—á–µ—Ç–æ–º –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤",
        "deposit_parameters": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∫–ª–∞–¥–∞",
        "deposit_amount": "–°—É–º–º–∞ –≤–∫–ª–∞–¥–∞ (‚Ç∏)",
        "deposit_rate": "–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (% –≥–æ–¥–æ–≤—ã—Ö)",
        "deposit_term": "–°—Ä–æ–∫ –≤–∫–ª–∞–¥–∞ (–º–µ—Å—è—Ü–µ–≤)",
        "capitalization_type": "–¢–∏–ø –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏",
        "capitalization_frequency": "–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏",
        "monthly_cap": "–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è",
        "quarterly_cap": "–ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è",
        "yearly_cap": "–ï–∂–µ–≥–æ–¥–Ω–∞—è",
        "end_term": "–í –∫–æ–Ω—Ü–µ —Å—Ä–æ–∫–∞",
        "additional_conditions": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
        "deposit_topup": "**–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∞:**",
        "monthly_topup": "–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (‚Ç∏)",
        "taxation": "**–ù–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ:**",
        "tax_free": "–ù–µ –æ–±–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞–ª–æ–≥–æ–º",
        "tax_rate": "–°—Ç–∞–≤–∫–∞ –Ω–∞–ª–æ–≥–∞ (%)",
        "inflation": "**–£—á–µ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏:**",
        "include_inflation": "–£—á–∏—Ç—ã–≤–∞—Ç—å –∏–Ω—Ñ–ª—è—Ü–∏—é",
        "inflation_rate": "–ü—Ä–æ–≥–Ω–æ–∑ –∏–Ω—Ñ–ª—è—Ü–∏–∏ (% –≥–æ–¥–æ–≤—ã—Ö)",
        "calculate_deposit": "üí∏ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
        "deposit_results": "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –≤–∫–ª–∞–¥–∞**",
        "initial_amount": "–ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞",
        "total_topup": "–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π",
        "final_amount": "–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞",
        "accrued_interest": "–ù–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã",
        "net_income": "–ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥",
        "tax_payment": "–ù–∞–ª–æ–≥ –∫ —É–ø–ª–∞—Ç–µ",
        "inflation_analysis": "üìä –£—á–µ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏",
        "real_final_amount": "–†–µ–∞–ª—å–Ω–∞—è –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞",
        "real_income": "–†–µ–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥",
        "real_annual_yield": "–†–µ–∞–ª—å–Ω–∞—è –≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
        "nominal_yield": "–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
        "positive_real_yield": "üí∞ **–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å!** –í–∞—à –≤–∫–ª–∞–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.",
        "low_real_yield": "‚ö†Ô∏è **–ù–∏–∑–∫–∞—è —Ä–µ–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å.** –í–∫–ª–∞–¥ –ª–∏—à—å —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏.",
        "negative_real_yield": "üìâ **–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å.** –ü–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤–∫–ª–∞–¥–∞ —Å–Ω–∏–∂–∞–µ—Ç—Å—è.",
        "with_inflation": "—Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–ª—è—Ü–∏–∏",
        "without_inflation": "–±–µ–∑ —É—á–µ—Ç–∞ –∏–Ω—Ñ–ª—è—Ü–∏–∏",
        "annual_yield": "üí´ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
        "deposit_growth": "üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ä–æ—Å—Ç–∞ –≤–∫–ª–∞–¥–∞",
        "deposit_growth_month": "–†–æ—Å—Ç –≤–∫–ª–∞–¥–∞ –ø–æ –º–µ—Å—è—Ü–∞–º",
        "month_label": "–ú–µ—Å—è—Ü",
        "amount_label": "–°—É–º–º–∞, ‚Ç∏",
        "capitalization_comparison": "üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏",
        "income": "–î–æ—Ö–æ–¥",
        "deposit_recommendations": "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        "best_income_message": "**–ù–∞–∏–±–æ–ª—å—à–∏–π –¥–æ—Ö–æ–¥** –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç **{}** –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: **{:.0f} ‚Ç∏**",
        "topup_benefit": "**–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∞** –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º.",
        # –û–±—â–∏–µ
        "not_calculated": "–ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω",
        "not_paid_off": "–ù–µ –æ–∫—É–ø–∏—Ç—Å—è",
        "years": "–ª–µ—Ç",
        "footer": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ –Ω–∞ Streamlit Cloud ‚Ä¢ –í–µ—Ä—Å–∏—è 2.0",
    },
}


def t(key):
    """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    return TRANSLATIONS[st.session_state.language].get(key, key)


# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ============================================================================

st.set_page_config(
    page_title="–§–∏–Ω–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
    page_icon="üí∞",
    layout="centered",
    initial_sidebar_state="expanded",
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–∞
if "language" not in st.session_state:
    st.session_state.language = "ru"

# ============================================================================
# –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ –° –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–ï–ú –Ø–ó–´–ö–û–í
# ============================================================================

with st.sidebar:
    st.title(t("author"))

    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞
    language = st.radio(
        "–¢—ñ–ª / –Ø–∑—ã–∫:",
        ["“ö–∞–∑–∞“õ—à–∞", "–†—É—Å—Å–∫–∏–π"],
        index=1 if st.session_state.language == "ru" else 0,
        key="language_selector",
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ session_state
    st.session_state.language = "kz" if language == "“ö–∞–∑–∞“õ—à–∞" else "ru"

    st.write(t("author_name"))
    st.write(t("courses"))
    st.write(t("bot"))
    st.markdown("---")

# ============================================================================
# –ó–ê–ì–û–õ–û–í–û–ö
# ============================================================================

st.title(t("title"))
st.markdown(f"*{t('subtitle')}*")

# ============================================================================
# –í–ö–õ–ê–î–ö–ò
# ============================================================================

tab1, tab2, tab3, tab4 = st.tabs([t("loans"), t("investment"), t("eps"), t("deposits")])

# ============================================================================
# 1. –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ö–†–ï–î–ò–¢–û–í
# ============================================================================

with tab1:
    st.header(t("calculate_schedule"))

    col1, col2 = st.columns(2)
    with col1:
        loan_amount = st.number_input(
            t("loan_amount"), min_value=0.0, value=1000000.0, step=10000.0
        )
        interest_rate = st.number_input(
            t("interest_rate"), min_value=0.0, value=10.0, step=0.1
        )
    with col2:
        loan_term = st.number_input(t("loan_term"), min_value=1, value=5, step=1)
        payment_type = st.selectbox(
            t("payment_type"), [t("annuity"), t("differentiated")]
        )

    monthly_rate = interest_rate / 100 / 12
    num_payments = loan_term * 12

    def calculate_annuity(principal, rate, periods):
        if rate == 0:
            return principal / periods
        annuity_payment = (
            principal * (rate * (1 + rate) ** periods) / ((1 + rate) ** periods - 1)
        )
        return annuity_payment

    def generate_schedule(principal, rate, periods, p_type):
        schedule = []
        remaining_balance = principal

        if p_type == t("annuity"):
            payment = calculate_annuity(principal, rate, periods)
            for i in range(1, periods + 1):
                interest_payment = remaining_balance * rate
                principal_payment = payment - interest_payment
                remaining_balance -= principal_payment
                if i == periods:
                    principal_payment += remaining_balance
                    payment += remaining_balance
                    remaining_balance = 0
                schedule.append(
                    {
                        t("period"): i,
                        t("payment"): payment,
                        t("interest"): interest_payment,
                        t("principal"): principal_payment,
                        t("balance"): max(remaining_balance, 0),
                    }
                )
        else:
            principal_payment = principal / periods
            for i in range(1, periods + 1):
                interest_payment = remaining_balance * rate
                payment = principal_payment + interest_payment
                remaining_balance -= principal_payment
                schedule.append(
                    {
                        t("period"): i,
                        t("payment"): payment,
                        t("interest"): interest_payment,
                        t("principal"): principal_payment,
                        t("balance"): max(remaining_balance, 0),
                    }
                )

        return pd.DataFrame(schedule)

    if st.button(t("calculate_loan"), type="primary", key="loan_calc"):
        schedule_df = generate_schedule(
            loan_amount, monthly_rate, num_payments, payment_type
        )

        total_payment = schedule_df[t("payment")].sum()
        total_interest = schedule_df[t("interest")].sum()

        st.metric(t("total_payment"), f"{total_payment:,.2f} ‚Ç∏")
        st.metric(t("total_interest"), f"{total_interest:,.2f} ‚Ç∏")

        st.subheader(t("payment_schedule"))
        display_df = schedule_df.copy()
        for col in [t("payment"), t("interest"), t("principal"), t("balance")]:
            display_df[col] = display_df[col].map("{:,.2f} ‚Ç∏".format)
        st.dataframe(display_df, use_container_width=True)

        st.subheader(t("payment_structure"))
        fig = go.Figure()
        fig.add_trace(
            go.Scatter(
                x=schedule_df[t("period")],
                y=schedule_df[t("principal")],
                mode="lines",
                stackgroup="one",
                name=t("principal"),
            )
        )
        fig.add_trace(
            go.Scatter(
                x=schedule_df[t("period")],
                y=schedule_df[t("interest")],
                mode="lines",
                stackgroup="one",
                name=t("interest"),
            )
        )
        fig.update_layout(
            title=t("payment_dynamics"),
            xaxis_title=(
                "–ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞" if st.session_state.language == "ru" else "–¢”©–ª–µ–º –Ω”©–º—ñ—Ä—ñ"
            ),
            yaxis_title="–°—É–º–º–∞, ‚Ç∏" if st.session_state.language == "ru" else "–°–æ–º–∞, ‚Ç∏",
        )
        st.plotly_chart(fig, use_container_width=True)

# ============================================================================
# 2. –ò–ù–í–ï–°–¢–ò–¶–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó
# ============================================================================

with tab2:
    st.header(t("investment"))

    discount_rate = (
        st.number_input(
            t("discount_rate"),
            min_value=0.0,
            value=10.0,
            step=0.1,
            key="disc_rate",
        )
        / 100
    )

    st.subheader(t("cash_flows"))
    st.caption(t("investment_caption"))

    initial_investment = st.number_input(
        t("initial_investment"), value=-1000000.0, step=10000.0
    )

    num_cash_flows = st.slider(
        t("analysis_periods"), min_value=1, max_value=20, value=5
    )

    cash_flows = [initial_investment]
    for i in range(1, num_cash_flows + 1):
        cf = st.number_input(
            f"{t('cash_flow_year')} {i} (‚Ç∏)",
            value=300000.0,
            step=10000.0,
            key=f"cf_{i}",
        )
        cash_flows.append(cf)

    if st.button(t("analyze_project"), type="primary", key="inv_analysis"):
        cash_flows_array = np.array(cash_flows)

        npv = npf.npv(discount_rate, cash_flows_array)
        try:
            irr = npf.irr(cash_flows_array) * 100
        except:
            irr = t("not_calculated")

        cumulative_cf = np.cumsum(cash_flows_array)
        pp_years = None
        for i, cum_cf in enumerate(cumulative_cf):
            if cum_cf >= 0:
                pp_years = (
                    i - 1 + (abs(cumulative_cf[i - 1]) / cash_flows_array[i])
                    if i > 0
                    else i
                )
                break

        discounted_cf = [
            cf / ((1 + discount_rate) ** i) for i, cf in enumerate(cash_flows_array)
        ]
        cumulative_dcf = np.cumsum(discounted_cf)
        dpp_years = None
        for i, cum_dcf in enumerate(cumulative_dcf):
            if cum_dcf >= 0:
                dpp_years = (
                    i - 1 + (abs(cumulative_dcf[i - 1]) / discounted_cf[i])
                    if i > 0
                    else i
                )
                break

        col1, col2 = st.columns(2)
        with col1:
            st.metric(t("npv"), f"{npv:,.2f} ‚Ç∏")
            if isinstance(irr, str):
                st.metric(t("irr"), irr)
            else:
                st.metric(t("irr"), f"{irr:.2f} %")
        with col2:
            st.metric(
                t("payback_period"),
                f"{pp_years:.2f} {t('years')}" if pp_years else t("not_paid_off"),
            )
            st.metric(
                t("discounted_payback"),
                f"{dpp_years:.2f} {t('years')}" if dpp_years else t("not_paid_off"),
            )

        st.subheader(t("cash_flow_diagram"))
        years = list(range(len(cash_flows_array)))
        fig = go.Figure()
        fig.add_trace(
            go.Bar(
                x=years,
                y=cash_flows_array,
                name=t("cash_flows"),
                marker_color=["red" if x < 0 else "green" for x in cash_flows_array],
            )
        )
        fig.add_trace(
            go.Scatter(
                x=years,
                y=cumulative_cf,
                mode="lines+markers",
                name=(
                    "–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫"
                    if st.session_state.language == "ru"
                    else "–ñ–∏–Ω–∞–ª“ì–∞–Ω –∞“ì—ã–Ω"
                ),
                line=dict(color="blue", width=3),
            )
        )
        fig.update_layout(
            title=t("cash_flows"),
            xaxis_title=(
                "–ü–µ—Ä–∏–æ–¥ (–≥–æ–¥—ã)"
                if st.session_state.language == "ru"
                else "–ö–µ–∑–µ“£ (–∂—ã–ª–¥–∞—Ä)"
            ),
            yaxis_title=(
                "–°—É–º–º–∞, ‚Ç∏" if st.session_state.language == "ru" else "–°–æ–º–∞, ‚Ç∏"
            ),
        )
        st.plotly_chart(fig, use_container_width=True)

        st.subheader(t("efficiency_conclusion"))
        if npv > 0:
            st.success(t("project_efficient"))
        else:
            st.error(t("project_inefficient"))

        if not isinstance(irr, str) and irr > discount_rate * 100:
            st.success(t("irr_higher").format(irr, discount_rate * 100))
        elif not isinstance(irr, str):
            st.warning(t("irr_lower").format(irr, discount_rate * 100))

# ============================================================================
# 3. –≠–ü–° –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†
# ============================================================================

with tab3:
    st.header(t("eps_title"))
    st.info(t("eps_info"))

    with st.expander(t("eps_details")):
        st.markdown(t("eps_include"))

    col1, col2 = st.columns(2)

    with col1:
        st.subheader(t("loan_parameters"))
        eps_loan_amount = st.number_input(
            t("loan_amount"),
            min_value=0.0,
            value=2000000.0,
            step=100000.0,
            key="eps_loan",
        )
        eps_nominal_rate = st.number_input(
            t("nominal_rate"),
            min_value=0.0,
            value=15.0,
            step=0.1,
            key="eps_nominal",
        )
        eps_term = st.number_input(
            t("loan_term_months"), min_value=1, value=36, step=1, key="eps_term"
        )
        eps_payment_type = st.selectbox(
            t("payment_type"), [t("annuity"), t("differentiated")], key="eps_payment"
        )

    with col2:
        st.subheader(t("additional_fees"))

        st.write(t("one_time_fees"))
        eps_issue_fee = st.number_input(
            t("issue_fee"),
            min_value=0.0,
            value=1.0,
            step=0.1,
            key="eps_issue",
        )
        eps_issue_fee_fixed = st.number_input(
            t("fixed_fee"),
            min_value=0.0,
            value=0.0,
            step=1000.0,
            key="eps_fixed",
        )

        st.write(t("recurring_fees"))
        eps_monthly_fee = st.number_input(
            t("monthly_fee"),
            min_value=0.0,
            value=500.0,
            step=500.0,
            key="eps_monthly",
        )
        eps_annual_fee = st.number_input(
            t("annual_fee"),
            min_value=0.0,
            value=0.0,
            step=1000.0,
            key="eps_annual",
        )

        st.write(t("insurance_section"))
        eps_insurance = st.number_input(
            t("insurance"),
            min_value=0.0,
            value=0.5,
            step=0.1,
            key="eps_insurance",
        )

    if st.button(t("calculate_eps"), type="primary", key="calc_eps"):
        cash_flows = []
        monthly_rate = eps_nominal_rate / 100 / 12

        initial_costs = 0

        if eps_issue_fee > 0:
            initial_costs += eps_loan_amount * eps_issue_fee / 100

        initial_costs += eps_issue_fee_fixed

        if eps_insurance > 0:
            initial_costs += eps_loan_amount * eps_insurance / 100

        cash_flows.append(eps_loan_amount - initial_costs)
        # –†–∞—Å—á–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        if eps_payment_type == t("annuity"):
            if monthly_rate == 0:
                monthly_payment = eps_loan_amount / eps_term
            else:
                monthly_payment = (
                    eps_loan_amount
                    * (monthly_rate * (1 + monthly_rate) ** eps_term)
                    / ((1 + monthly_rate) ** eps_term - 1)
                )
        else:
            principal_payment = eps_loan_amount / eps_term

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        remaining_balance = eps_loan_amount

        for month in range(1, eps_term + 1):
            monthly_cash_outflow = 0

            if eps_payment_type == t("annuity"):
                # –î–ª—è –∞–Ω–Ω—É–∏—Ç–µ—Ç–∞ –ø–ª–∞—Ç–µ–∂ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π
                interest_payment = remaining_balance * monthly_rate
                principal_payment = monthly_payment - interest_payment
                monthly_cash_outflow = monthly_payment
                remaining_balance -= principal_payment
            else:
                # –î–ª—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
                interest_payment = remaining_balance * monthly_rate
                monthly_cash_outflow = principal_payment + interest_payment
                remaining_balance -= principal_payment

            # –î–æ–±–∞–≤–ª—è–µ–º –µ–∂–µ–º–µ—Å—è—á–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
            monthly_cash_outflow += eps_monthly_fee

            # –î–æ–±–∞–≤–ª—è–µ–º –µ–∂–µ–≥–æ–¥–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –º–µ—Å—è—Ü –∫—Ä–∞—Ç–µ–Ω 12)
            annual_fee_to_add = (
                eps_annual_fee if month % 12 == 0 and eps_annual_fee > 0 else 0
            )
            monthly_cash_outflow += annual_fee_to_add

            cash_flows.append(-monthly_cash_outflow)

        # –†–∞—Å—á–µ—Ç –≠–ü–° (IRR –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤)
        try:
            eps_result = npf.irr(cash_flows) * 12 * 100  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≥–æ–¥–æ–≤—É—é —Å—Ç–∞–≤–∫—É
            eps_result = max(eps_result, 0)  # –≠–ü–° –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π
        except:
            eps_result = eps_nominal_rate  # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–∏–Ω–∞–ª—å–Ω—É—é

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric(t("nominal_rate1"), f"{eps_nominal_rate:.2f}%")

        with col2:
            st.metric(
                t("effective_rate"),
                f"{eps_result:.2f}%",
                delta=f"{eps_result - eps_nominal_rate:.2f}%",
            )

        with col3:
            if eps_nominal_rate > 0:
                overpayment_ratio = (
                    (eps_result - eps_nominal_rate) / eps_nominal_rate * 100
                )
                st.metric(
                    t("difference"),
                    f"{eps_result - eps_nominal_rate:.2f}%",
                    delta=f"{overpayment_ratio:.1f}% {t("from_nominal")}",
                )

        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
        st.subheader(t("payment_details"))

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–µ—Ä–≤—ã–º–∏ 12 –º–µ—Å—è—Ü–∞–º–∏
        schedule_data = []
        remaining = eps_loan_amount

        for month in range(1, min(13, eps_term + 1)):
            if eps_payment_type == t("annuity"):
                interest = remaining * monthly_rate
                principal = monthly_payment - interest
                total_payment = monthly_payment
                remaining -= principal
            else:
                interest = remaining * monthly_rate
                principal = eps_loan_amount / eps_term
                total_payment = principal + interest
                remaining -= principal

            # –†–ê–°–ß–ï–¢ –ö–û–ú–ò–°–°–ò–ô –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ú–ï–°–Ø–¶–ê
            monthly_fee_to_add = eps_monthly_fee
            annual_fee_to_add = (
                eps_annual_fee if month % 12 == 0 and eps_annual_fee > 0 else 0
            )
            total_fees = monthly_fee_to_add + annual_fee_to_add

            schedule_data.append(
                {
                    t("month"): month,
                    t("principal"): principal,
                    t("interest"): interest,
                    t("fees"): total_fees,
                    t("total_payment_single"): total_payment + total_fees,
                }
            )

        schedule_df = pd.DataFrame(schedule_data)
        st.dataframe(
            schedule_df.style.format(
                {
                    t("principal"): "{:,.2f} ‚Ç∏",
                    t("interest"): "{:,.2f} ‚Ç∏",
                    t("fees"): "{:,.2f} ‚Ç∏",
                    t("total_payment_single"): "{:,.2f} ‚Ç∏",
                }
            )
        )

        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–µ—Ä–µ–ø–ª–∞—Ç—ã
        st.subheader(t("overpayment_structure"))

        # –£—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–º–∏—Å—Å–∏–∏
        # –û–±—â–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        if eps_payment_type == t("annuity"):
            total_interest_paid = monthly_payment * eps_term - eps_loan_amount
        else:
            remaining_balance = eps_loan_amount
            total_interest_paid = 0
            principal_payment_diff = eps_loan_amount / eps_term

            for month in range(1, eps_term + 1):
                interest_payment = remaining_balance * monthly_rate
                total_interest_paid += interest_payment
                remaining_balance -= principal_payment_diff

        # –†–∞—Å—á–µ—Ç –í–°–ï–• –∫–æ–º–∏—Å—Å–∏–π –≤–∫–ª—é—á–∞—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é
        total_monthly_fees = eps_monthly_fee * eps_term
        total_annual_fees = eps_annual_fee * (eps_term // 12)
        total_issue_fee_percent = (
            eps_loan_amount * eps_issue_fee / 100
        )  # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è
        total_issue_fee_fixed = eps_issue_fee_fixed  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è
        total_insurance = eps_loan_amount * eps_insurance / 100

        labels = [
            t("interest"),
            t("monthly_fees"),
            t("annual_fees"),
            t("issue_fee_full"),
            t("issue_fee_fixed"),
            t("insurance"),
        ]

        values = [
            total_interest_paid,
            total_monthly_fees,
            total_annual_fees,
            total_issue_fee_percent,
            total_issue_fee_fixed,
            total_insurance,
        ]

        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        filtered_labels = []
        filtered_values = []
        for label, value in zip(labels, values):
            if value > 0:
                filtered_labels.append(label)
                filtered_values.append(value)

        if filtered_values:
            fig_eps = px.pie(
                values=filtered_values,
                names=filtered_labels,
                title=t("overpayment_distribution"),
            )
            st.plotly_chart(fig_eps, use_container_width=True)
        else:
            st.info(t("no_additional_fees"))

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—â–µ–π –ø–µ—Ä–µ–ø–ª–∞—Ç–µ
        total_overpayment = sum(values)
        st.info(
            f"{t('total_overpayment').format(total_overpayment, total_overpayment / eps_loan_amount * 100)}"
        )

        # –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.subheader(t("eps_conclusions"))

        if eps_result > eps_nominal_rate + 2:
            st.warning(f"{t('eps_warning').format(eps_result - eps_nominal_rate)}")
            st.write(t("eps_recommendation"))
        elif eps_result > eps_nominal_rate + 0.5:
            st.info(f"{t('eps_info_moderate').format(eps_result - eps_nominal_rate)}")
        else:
            st.success(f"{t('eps_success')}")

# ============================================================================
# 4. –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –í–ö–õ–ê–î–û–í –° –ö–ê–ü–ò–¢–ê–õ–ò–ó–ê–¶–ò–ï–ô
# ============================================================================

with tab4:
    st.header(t("deposit_title"))
    st.success(t("deposit_success"))

    col1, col2 = st.columns(2)

    with col1:
        st.subheader(t("deposit_parameters"))
        deposit_amount = st.number_input(
            t("deposit_amount"),
            min_value=1000.0,
            value=100000.0,
            step=10000.0,
            key="deposit_amount",
        )
        deposit_rate = st.number_input(
            t("deposit_rate"),
            min_value=0.1,
            value=8.0,
            step=0.1,
            key="deposit_rate",
        )
        deposit_term = st.number_input(
            t("deposit_term"), min_value=1, value=12, step=1, key="deposit_term"
        )

        st.subheader(t("capitalization_type"))
        capitalization_type = st.selectbox(
            t("capitalization_frequency"),
            [t("monthly_cap"), t("quarterly_cap"), t("yearly_cap"), t("end_term")],
            key="cap_type",
        )

    with col2:
        st.subheader(t("additional_conditions"))

        # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∞
        st.write(t("deposit_topup"))
        monthly_topup = st.number_input(
            t("monthly_topup"),
            min_value=0.0,
            value=0.0,
            step=1000.0,
            key="monthly_topup",
        )

        # –ù–∞–ª–æ–≥–∏
        st.write(t("taxation"))
        tax_free = st.checkbox(t("tax_free"), value=True, key="tax_free")
        if not tax_free:
            tax_rate = st.number_input(
                t("tax_rate"), min_value=0.0, value=10.0, step=0.1, key="tax_rate"
            )

        # –ò–Ω—Ñ–ª—è—Ü–∏—è
        st.write(t("inflation"))
        include_inflation = st.checkbox(
            t("include_inflation"), value=False, key="include_inflation"
        )
        if include_inflation:
            inflation_rate = st.number_input(
                t("inflation_rate"),
                min_value=0.0,
                value=5.0,
                step=0.1,
                key="inflation_rate",
            )

    # –†–∞—Å—á–µ—Ç –≤–∫–ª–∞–¥–∞
    if st.button(t("calculate_deposit"), type="primary", key="calc_deposit"):

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        if capitalization_type == t("monthly_cap"):
            periods_per_year = 12
        elif capitalization_type == t("quarterly_cap"):
            periods_per_year = 4
        elif capitalization_type == t("yearly_cap"):
            periods_per_year = 1
        else:  # –í –∫–æ–Ω—Ü–µ —Å—Ä–æ–∫–∞
            periods_per_year = 1

        # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤ –∫–æ–Ω—Ü–µ —Å—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞
        capitalization_at_end = capitalization_type == t("end_term")

        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞
        periodic_rate = deposit_rate / 100 / periods_per_year

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤
        total_periods = deposit_term / (12 / periods_per_year)

        # –†–∞—Å—á–µ—Ç –±–µ–∑ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        if monthly_topup == 0:
            if capitalization_at_end:
                # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                final_amount = deposit_amount * (
                    1 + deposit_rate / 100 * deposit_term / 12
                )
                total_interest = final_amount - deposit_amount
            else:
                # –°–ª–æ–∂–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
                final_amount = deposit_amount * (1 + periodic_rate) ** total_periods
                total_interest = final_amount - deposit_amount
        else:
            # –†–∞—Å—á–µ—Ç —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º (–∞–Ω–Ω—É–∏—Ç–µ—Ç)
            final_amount = deposit_amount
            monthly_growth = 1 + deposit_rate / 100 / 12

            for month in range(1, deposit_term + 1):
                final_amount = final_amount * monthly_growth + monthly_topup

            total_interest = (
                final_amount - deposit_amount - (monthly_topup * deposit_term)
            )

        # –†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤
        tax_amount = 0
        if not tax_free:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –Ω–∞–ª–æ–≥ –Ω–∞ –≤–µ—Å—å –¥–æ—Ö–æ–¥
            tax_amount = total_interest * tax_rate / 100
            net_interest = total_interest - tax_amount
            net_final_amount = final_amount - tax_amount
        else:
            net_interest = total_interest
            net_final_amount = final_amount

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.success(t("deposit_results"))

        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric(t("initial_amount"), f"{deposit_amount:,.0f} ‚Ç∏")
            st.metric(t("total_topup"), f"{monthly_topup * deposit_term:,.0f} ‚Ç∏")

        with col2:
            st.metric(t("final_amount"), f"{final_amount:,.0f} ‚Ç∏")
            st.metric(t("accrued_interest"), f"{total_interest:,.0f} ‚Ç∏")

        with col3:
            st.metric(t("net_income"), f"{net_interest:,.0f} ‚Ç∏")
            if tax_amount > 0:
                st.metric(t("tax_payment"), f"{tax_amount:,.0f} ‚Ç∏")

        # –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        annual_yield = (net_interest / deposit_amount) * (12 / deposit_term) * 100
        st.metric(t("annual_yield"), f"{annual_yield:.2f}%")

        # –£—á–µ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏
        if include_inflation and inflation_rate > 0:
            st.markdown("---")
            st.success(t("inflation_analysis"))

            inflation_factor = (1 + inflation_rate / 100) ** (deposit_term / 12)
            real_final_amount = net_final_amount / inflation_factor
            real_income = (
                real_final_amount - deposit_amount - (monthly_topup * deposit_term)
            )
            real_annual_yield = (
                (real_income / deposit_amount) * (12 / deposit_term) * 100
            )

            col1, col2, col3 = st.columns(3)

            with col1:
                st.metric(
                    t("real_final_amount"),
                    f"{real_final_amount:,.0f} ‚Ç∏",
                    delta=f"-{(final_amount - real_final_amount):,.0f} ‚Ç∏",
                )

            with col2:
                st.metric(
                    t("real_income"),
                    f"{real_income:,.0f} ‚Ç∏",
                    delta=f"-{(net_interest - real_income):,.0f} ‚Ç∏",
                )

            with col3:
                st.metric(
                    t("real_annual_yield"),
                    f"{real_annual_yield:.2f}%",
                    delta=f"-{(annual_yield - real_annual_yield):.2f}%",
                )

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            fig_inflation = go.Figure()

            fig_inflation.add_trace(
                go.Indicator(
                    mode="number+delta",
                    value=real_annual_yield,
                    number={"suffix": "%"},
                    delta={
                        "reference": annual_yield,
                        "relative": False,
                        "valueformat": ".2f",
                        "suffix": "%",
                    },
                    title={
                        "text": f"{t('real_annual_yield')}<br><span style='font-size:0.8em;color:gray'>{t('with_inflation')}</span>"
                    },
                    domain={"row": 0, "column": 0},
                )
            )

            fig_inflation.add_trace(
                go.Indicator(
                    mode="number+delta",
                    value=annual_yield,
                    number={"suffix": "%"},
                    delta={
                        "reference": real_annual_yield,
                        "relative": False,
                        "valueformat": ".2f",
                        "suffix": "%",
                    },
                    title={
                        "text": f"{t('nominal_yield')}<br><span style='font-size:0.8em;color:gray'>{t('without_inflation')}</span>"
                    },
                    domain={"row": 0, "column": 1},
                )
            )

            fig_inflation.update_layout(
                grid={"rows": 1, "columns": 2, "pattern": "independent"}
            )
            st.plotly_chart(fig_inflation, use_container_width=True)

            # –í—ã–≤–æ–¥ –æ —Ä–µ–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            if real_annual_yield > 0:
                st.success(t("positive_real_yield"))
            elif real_annual_yield > -2:
                st.warning(t("low_real_yield"))
            else:
                st.error(t("negative_real_yield"))

        # –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –≤–∫–ª–∞–¥–∞
        st.subheader(t("deposit_growth"))

        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ –º–µ—Å—è—Ü–∞–º
        months = list(range(0, deposit_term + 1))
        amounts = [deposit_amount]
        current_amount = deposit_amount
        monthly_rate = deposit_rate / 100 / 12

        for month in range(1, deposit_term + 1):
            if capitalization_type == t("monthly_cap") or capitalization_at_end:
                current_amount = current_amount * (1 + monthly_rate) + monthly_topup
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                current_amount = (
                    current_amount + (deposit_amount * monthly_rate) + monthly_topup
                )
            amounts.append(current_amount)

        fig_deposit = px.line(
            x=months,
            y=amounts,
            title=t("deposit_growth_month"),
            labels={"x": t("month_label"), "y": t("amount_label")},
        )
        fig_deposit.update_traces(line=dict(color="green", width=3))
        st.plotly_chart(fig_deposit, use_container_width=True)

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        st.subheader(t("capitalization_comparison"))

        cap_types = [
            t("monthly_cap"),
            t("quarterly_cap"),
            t("yearly_cap"),
            t("end_term"),
        ]
        results = []

        for cap_type in cap_types:
            if cap_type == t("monthly_cap"):
                result = deposit_amount * (1 + deposit_rate / 100 / 12) ** deposit_term
            elif cap_type == t("quarterly_cap"):
                result = deposit_amount * (1 + deposit_rate / 100 / 4) ** (
                    deposit_term / 3
                )
            elif cap_type == t("yearly_cap"):
                result = deposit_amount * (1 + deposit_rate / 100) ** (
                    deposit_term / 12
                )
            else:  # –í –∫–æ–Ω—Ü–µ —Å—Ä–æ–∫–∞
                result = deposit_amount * (1 + deposit_rate / 100 * deposit_term / 12)

            results.append(result)

        comparison_df = pd.DataFrame(
            {
                t("capitalization_type"): cap_types,
                t("final_amount"): results,
                t("income"): [x - deposit_amount for x in results],
            }
        )

        st.dataframe(
            comparison_df.style.format(
                {t("final_amount"): "{:,.2f} ‚Ç∏", t("income"): "{:,.2f} ‚Ç∏"}
            )
        )

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.subheader(t("deposit_recommendations"))

        best_cap_type = cap_types[np.argmax(results)]
        best_income = max(results) - deposit_amount

        st.info(f"{t('best_income_message').format(best_cap_type, best_income)}")

        if monthly_topup > 0:
            st.success(t("topup_benefit"))


# ============================================================================
# –§–£–¢–ï–†
# ============================================================================

st.markdown("---")
st.markdown(t("author"))
st.write(t("author_name"))
st.write(t("courses"))
st.write(t("bot"))
st.write(t("contacts"))
st.markdown("---")

footer_texts = {
    "kz": "“ö–∞—Ä–∂—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã ‚Ä¢ 2.0 –Ω“±—Å“õ–∞—Å—ã ‚Ä¢ ¬© 2025",
    "ru": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ‚Ä¢ –í–µ—Ä—Å–∏—è 2.0 ‚Ä¢ ¬© 2025",
}

st.markdown(
    f"<div style='text-align: center; color: gray;'>{footer_texts[st.session_state.language]}</div>",
    unsafe_allow_html=True,
)

# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø

if __name__ == "__main__":
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    pass